; Need to impl: quote
(define (name? val) (bool (is 'name val)))
(define (number? val) (bool (is 'number val)))
(define (list? val) (bool (is 'list val)))

(define (bool x) (if x 't '()))

(define (third list) (elt list 2))
(define (fourth list) (elt list 3))

;; an lmap is just a list of pairs, which can be treated like a dictionary, but it *can* contain duplicate keys, and of course it always has a defined order.
(define (lmap/new) ())

;; assigns the element to the given key in the list-map; does not perform any deduplication, so if the key is a duplicate, both entries will exist.
(define (lmap/add lmap key elem)
    (append lmap (list key elem)))

(define (lmap/concat lmap1 lmap2)
    (concat lmap1 lmap2))

(define (lmap/lookup lmap key) 
    (if (null lmap)
        ()
        (if (= key (first (first lmap)))
            (second (first lmap))
            (lmap/lookup (tail lmap) key))))

(define (car pair) (first pair))
(define (cdr pair) (second pair))
(define (cons a b) (concat (list a) b))
(define (cadr list) (car (cdr list)))

; zips two lists together: (zip '(1 2 3) '(7 8 9)) -> ((1 7) (2 8) (3 9))
(define (zip l1 l2)
    (if (and (not (null l1)) (not (null l2)))
        (cons (list (first l1) (first l2)) (zip (tail l1) (tail l2)))
        ()))

;; there's a name at the beginning of two layers of lists
(define (nested-name? exp) 
    (and 
        (not (null exp))
        (is 'list exp)
        (not (null (first exp))) 
        (is 'list (first exp))
        (is 'name (first (first exp)))))

(define (eval exp env)
    (do (println "exp: ~a\n" exp) (cond
        ; if we have a symbol like `x`, replace it with its value in the environment
        ((is 'name exp) (lmap/lookup env exp))
        ; leave numbers as-is
        ((is 'number exp) exp)
        ((nested-name? exp)
            (cond
                ; ((lambda (args*) exp) env*)
                ; binds the arguments into the environment, and evaluates the lambda expression within that context
                ((eq 'lambda (first (first exp)))
                 ; the lambda is a 2-list, the first elem a 3-list
                 (eval (third (first exp)) (lmap/concat 
                                                (zip (second (first exp)) (eval-list (tail exp) env))
                                                env)))
                ; ((label term exp) env)
                ; adds the given term to the environment, executing its expression within that environment
                ((eq 'label (first (first exp)))
                    (eval 
                        ; we will have a non-nested lambda expression, and we want to convert it to one nested in parens where the second argument is the environment, that way it gets evaluated by the clause above
                        (cons (third (first exp)) (tail exp))
                        (lmap/concat 
                            (lmap/add env 
                                (second (first exp)) 
                                (third (first exp)))
                            env)))))
        ; we treat lists as function application
        ((is 'list exp)
            ; let's get the name of the function
            (let ((name (first exp)))
                (cond
                    ; following, everything is strictly evaluated, except for 'quote
                    ((= name 'quote) (second exp))
                    ((= name 'name?) (name? (eval (second exp) env)))
                    ((= name 'number?) (number? (eval (second exp) env)))
                    ((= name 'list?) (list? (eval (second exp) env)))
                    ((= name '=) (if 
                        (eq (eval (second exp) env) (eval (third exp) env)) 
                        't 
                        '()))
                    ((= name 'first) (first (eval (second exp) env)))
                    ((= name 'rest) (tail (eval (second exp) env)))
                    ; (push 5 (quote (1))) -> (5 1)
                    ((= name 'cons) (cons (eval (second exp) env) (eval (third exp) env)))
                    ; (cond 1st 2nd ... n-1th nth)
                    ; if the first clause evals to true, we return the second one, otherwise we repeat evaluation on the next pair of elements.
                    ((= name 'cond) (eval-cond (tail exp) env))
                    ((= name '+) (+ (eval (second exp) env) (eval (third exp) env)))
                    ((= name '-) (- (eval (second exp) env) (eval (third exp) env)))
                    ((= name '*) (* (eval (second exp) env) (eval (third exp) env)))
                    ; if all else failed, replace the name in the function call with its lookup in the environment
                    (else (eval 
                            (cons (lmap/lookup env name) (tail exp))
                            env))
                )
            )
        )
    ))
)

;; evaluates the cond expression
(define (eval-cond body env)
    (cond 
        ((eq 't (eval (first (first body)) env))
        (eval (second (first body)) env))
        (else (eval-cond (tail body) env))))

;; evaluates the list of expressions in the given environment
(define (eval-list list env)
    (cond ((null list) ())
          ; start constructing a new list, evaluating the first term, and recursing over further elements
          (else (cons (eval (first list) env)
                      (eval-list (tail list) env)))))


(define (print-list list)
    (if (null list) 
        () 
        (do 
            (println "~s" (first list))
            (print-list (tail list)))))

(define (eval-test) 
    (eval 
    ; Program:
    '((label factorial 
        (lambda (x) 
            (cond 
                ((= x 0) 1)
                ((quote t) (* x (factorial (- x 1)))))
        ))
        3)
    ; Environment:
    '((x 3) (y 55)))
)

"((label factorial 
        (lambda (x) 
            (cond 
                ((= x 0) 1)
                ((quote t) (* x (factorial (- x 1)))))
        ))
        3)"

(define (main) (println "~a" (eval-test)))
;(define (main) (println "~a" (cadr (cons 1 (cons 2 ())))))